/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"

#include <conio.h>
#include <ctype.h>

#include "tsThreadServices.h"

#include "conReadWrite.h"

namespace Con
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Regional variables.

   // The last two chars that were input.
   int mKeyIn = 0;

   // True if the last read one is printable.
   bool mPrintable;

   // True if the last read one is the end of read.
   bool mEndOfRead;

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Read one char.

int readOne()
{
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Read the input.

   // First, clear the flags.
   mPrintable = false;
   mEndOfRead = false;

   // Read the key input.
   mKeyIn = _getch();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Test the input.

   // Test the input for end of read.
   if (mKeyIn == 'z')
   {
      mEndOfRead = true;
      return cKey_EndOfRead;
   }

   if (mKeyIn == 13) return cKey_Enter;
   if (mKeyIn == 8)  return cKey_BackSpace;

   if (mKeyIn != 224)
   {
      if (isprint(mKeyIn))
      {
         mPrintable = true;
         return mKeyIn;
      }
      else
      {
         return cKey_Ignore;
      }
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Test the input.

   // Read the key input.
   mKeyIn = _getch();

   // Test the input for special keys.
   if (mKeyIn == 83) return cKey_Delete;
   if (mKeyIn == 75) return cKey_LeftArrow;
   if (mKeyIn == 77) return cKey_RightArrow;
   if (mKeyIn == 72) return cKey_UpArrow;
   if (mKeyIn == 80) return cKey_DownArrow;
   if (mKeyIn == 71) return cKey_Home;
   if (mKeyIn == 79) return cKey_End;

   return cKey_Ignore;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Return true if the last read one is printable/

bool isPrintable()
{
   return mPrintable;
}

bool isEndOfRead()
{
   return mEndOfRead;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Write one char.

void writeOne(int aChar)
{
   putchar(aChar);
}

void writeNewLine()
{
   putchar('\n');
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace
