#pragma once
/*==============================================================================

Table classes that can be used by the command line file classes.
One or two dimensional tables classes of int,double,string.
One dimensional talble of string.

==============================================================================*/

#include "stdlib.h"
#include "stdio.h"
#include <array>

#include "risCmdLineExec.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Ris
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Table, 1 dimensional, indexed by 0..R-1

template<size_t N>
class CmdLineTable1DInt : public std::array<int,N>, public Ris::BaseCmdLineExec
{
public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Vector components.
   int  mRowIndex;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Intrastructure.

   // Constructor.
   CmdLineTable1DInt()
   {
      reset();
   }

   void reset()
   {
      mRowIndex = 0;
      for (int i = 0; i < N; i++) e(i) = 0;
   }

   // Access components.
   int& e(int aRow)
   {
      return this->operator[](aRow);
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   void show(char* aLabel = 0)
   {
      char tLabel[30];

      if (aLabel == 0)
      {
         strcpy(tLabel, "CmdLineIntTable1D");
      }
      else
      {
         strncpy(tLabel, aLabel, 30);
      }

      for (int i = 0; i < N; i++) printf("%s  %d  %10d\n", tLabel, i, e(i));
      printf("\n");
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Execute, overload used to read from a command line file. This is called
   // for each line in the corresponding table section of the file. It parses 
   // the file command line to read table values
   void execute(Ris::CmdLineCmd* aCmd)
   {

   }

};

//******************************************************************************
//******************************************************************************
//******************************************************************************

}//namespace




