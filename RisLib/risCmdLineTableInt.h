#pragma once
/*==============================================================================

Table classes that can be used by the command line file classes.
One or two dimensional tables classes of int,double,string.
One dimensional talble of string.

==============================================================================*/

#include "stdlib.h"
#include "stdio.h"
#include <array>

#include "risCmdLineExec.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Ris
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Table, 1 dimensional, indexed by 0..R-1

template<size_t MaxRows>
class CmdLineTable1DInt : public std::array<int, MaxRows>, public Ris::BaseCmdLineExec
{
public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Vector components.
   int  mRows;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   CmdLineTable1DInt()
   {
      reset();
   }

   // Reset variables.
   void reset()
   {
      mRows = 0;
      for (int i = 0; i < MaxRows; i++) e(i) = 0;
   }

   // Access array elements.
   int& e(int aRow)
   {
      return this->operator[](aRow);
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Show.
   void show(char* aLabel = 0)
   {
      for (int i = 0; i < mRows; i++) printf("%s  %d  %10d\n", aLabel, i, e(i));
      printf("\n");
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Execute, read from a command line file. This is called via a nested push.
   void execute(Ris::CmdLineCmd* aCmd) override
   {
      // This should be the first command after the nested push.
      if (aCmd->isCmd("{"))
      {
      }
      // Pop back out at the end.
      else if (aCmd->isCmd("}"))
      {
         nestedPop(aCmd);
      }
      // This should be a numerical value.
      else if (mRows < MaxRows)
      {
         e(mRows++) = aCmd->argInt(0);
      }
   }
};

//******************************************************************************
//******************************************************************************
//******************************************************************************

}//namespace




