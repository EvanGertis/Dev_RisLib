//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"

#include <stdarg.h>

#include "my_functions.h"
#include "risAlphaDir.h"

#include "tsShare.h"
#include "tsThreadServices.h"

namespace TS
{

//****************************************************************************
//****************************************************************************
//****************************************************************************
// Filtered print, if the corresponding entry in the filter table is true
// then the print is executed.

void print(int aLevel, const char* aFormat, ...)
{
   //*************************************************************************
   //*************************************************************************
   //*************************************************************************
   // Exit if print not enabled.

   if (aLevel > tls()->mPrintLevel) return;

   //*************************************************************************
   //*************************************************************************
   //*************************************************************************
   // Buffers.

   // Input string buffer.
   char  tInputBuffer[cMaxStringSize];
   int   tInputSize;

   // Print string buffer.
   char  tPrintBuffer[cMaxStringSize];
   int   tPrintSize;

   //*************************************************************************
   //*************************************************************************
   //*************************************************************************
   // Do a vsprintf with variable arg list into the input string buffer.

   va_list  ArgPtr;
   va_start(ArgPtr, aFormat);
   tInputSize = vsnprintf(tInputBuffer, cMaxStringSize, aFormat, ArgPtr);
   va_end(ArgPtr);

   //*************************************************************************
   //*************************************************************************
   //*************************************************************************
   // Do an sprintf with the thread name and the input string into the
   // print string.

   tPrintSize = sprintf(tPrintBuffer,"%-20s $$ %s",
      tls()->mThreadName,
      tInputBuffer);

   //*************************************************************************
   //*************************************************************************
   //*************************************************************************
   // Print the string.

   // Print to stdout. This appends an eol \n.
   puts(tPrintBuffer);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
} //namespace

