#ifndef _RISLOGFILE_H_
#define _RISLOGFILE_H_
/*==============================================================================

text files 

==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************
#include <stdio.h>

//******************************************************************************
//******************************************************************************
//******************************************************************************
// log files

namespace Ris
{

class LogFileWriter
{
public:

   //---------------------------------------------------------------------------
   // Constructor

   LogFileWriter();

   //---------------------------------------------------------------------------
   // Open the text file for write

   bool open (char* aFilename);

   //---------------------------------------------------------------------------
   // Write to the text file

   void write (const char* aFormat, ...);

   //---------------------------------------------------------------------------
   // Close the text file

   void close ();

   //---------------------------------------------------------------------------
   // Members

   // File handle
   FILE*  mFile;

   // Text buffer
   static const int cMaxStringSize = 400;
   char mString[cMaxStringSize];
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// CSV files of doubles, writer

class CsvFileWriter
{
public:

   //---------------------------------------------------------------------------
   // Constructor

   CsvFileWriter();

   //---------------------------------------------------------------------------
   // Open the text file for write

   bool open (char* aFilename);

   //---------------------------------------------------------------------------
   // Close the text file

   void close ();

   //---------------------------------------------------------------------------
   // Write a row to the text file

   void writeRow  (const char* aFormat, ...);
   void writeRowN (int aNumArgs, ...);
   void writeRow  (double aX1);
   void writeRow  (double aX1,double aX2);
   void writeRow  (double aX1,double aX2,double aX3);
   void writeRow  (double aX1,double aX2,double aX3,double aX4);

   //---------------------------------------------------------------------------
   // Members

   // File handle
   FILE*  mFile;

   // Text buffer
   static const int cMaxStringSize = 400;
   char mString[cMaxStringSize];
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// CSV files of doubles, reader

class CsvFileReader
{
public:

   //---------------------------------------------------------------------------
   // Constructor

   CsvFileReader();

   //---------------------------------------------------------------------------
   // Open the text file for read

   bool open (char* aFilename);

   //---------------------------------------------------------------------------
   // Close the text file

   void close ();

   //---------------------------------------------------------------------------
   // Read from the file

   bool readRow ();

   //---------------------------------------------------------------------------
   //---------------------------------------------------------------------------
   //---------------------------------------------------------------------------
   // Members

   // File handle
   FILE*  mFile;

   // Text buffer
   static const int cMaxStringSize = 400;
   char mString[cMaxStringSize];
   char mDelimiters[8];

   //---------------------------------------------------------------------------
   //---------------------------------------------------------------------------
   //---------------------------------------------------------------------------
   // Matrix components

   static const int cMaxNumOfCols=100;
   double mValues[cMaxNumOfCols];
   int mCols;

   // Access column values from the last row that was read.
   double& e(int aCol);
   double& operator()(int aCol);

   //---------------------------------------------------------------------------
   //---------------------------------------------------------------------------
   //---------------------------------------------------------------------------
   // Helpers

   void show();
   static void trimString(char* aString);
};

//******************************************************************************
}//namespace
#endif

