#pragma once
/*==============================================================================

Table class templates that can be used by the command line file classes.
One or two dimensional table classes of int,double,string.

==============================================================================*/

#include "stdlib.h"
#include "stdio.h"
#include <array>
#include <type_traits>

#include "my_functions.h"
#include "risCmdLineExec.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Ris
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Fixed length string.

// Fixed length string used in 1d string table.
static const int cTableStringSize = 200;
typedef char TableString[cTableStringSize];

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// One dimesnional table.

template<typename ElementType,size_t MaxRows>
class CmdLineTable1D : public std::array<ElementType, MaxRows>, public Ris::BaseCmdLineExec
{
public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Last row number that was read from the file.
   int  mRows;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   CmdLineTable1D()
   {
      reset();
   }

   ElementType& e(int aRow)
   {
      return this->operator[](aRow);
   }

   // Reset variables.
   void reset()
   {
      mRows = 0;
      for (int i = 0; i < MaxRows; i++)
      {
         // Specialize.
         resetElement(e(i));
      }
   }

   // Specialize.
   template<typename U = ElementType>
   void resetElement(ElementType& aX,
      typename std::enable_if<std::is_same<U, int>::value>::type* = 0)
   {
      aX = 0;
   }

   // Specialize.
   template<typename U = ElementType>
   void resetElement(ElementType& aX,
      typename std::enable_if<std::is_same<U, double>::value>::type* = 0)
   {
      aX = 0;
   }




};


//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace




