#pragma once

/*==============================================================================
Thread notification object.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "risThreadsSynch.h"
#include "risLogic.h"

namespace Ris
{
namespace Threads
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// The class provides a mechanism that allows a thread to wait for 
// notifications from other threads.


class Notify
{
public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Binary semaphore event that the owning thread blocks on. It is signalled
   // by other threads that use it to notify the owning thread of a
   // notification event.
   BinarySemaphore mEventSem;

   // AND OR masked latch.
   Ris::Logic::AndOrLatch  mBitLatch;

public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   Notify();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Reset the bit mask.
  void reset();

  // Set a bit in the bit mask.
  void setMaskBit(int aBitNum);

  // Set a bit in the bit latch and signal the event semaphore.
  void notify(int aBitNum);

  // Wait for a bit to be set.
   void waitForBit(int aTimeout);
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace
}//namespace


