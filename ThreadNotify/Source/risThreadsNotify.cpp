/*==============================================================================
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"

#include <windows.h> 

#include <atomic> 

#include "risThreadsThreads.h"

#include "risThreadsNotify.h"

namespace Ris
{
namespace Threads
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Constructor.

Notify::Notify()
{
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Reset the bit mask.

void Notify::reset()
{
   // Reset the bit mask and bit latch.
   mBitLatch.reset();

   // Wait for the event.
   mEventSem.reset();
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Set a bit in the bit mask.

void Notify::setMaskBit(int aBitNum)
{
   mBitLatch.setMaskBit(aBitNum);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Set a bit in the bit latch and signal the event semaphore.

void Notify::notify(int aBitNum)
{
   // Set a bit in the latch.
   mBitLatch.setLatchBit(aBitNum);

   // Test the latch for any masked bit set.
   if (mBitLatch.isAny())
   {
      // Signal the event.
      mEventSem.put();
   }
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Wait for a bit to be set.

void Notify::waitForBit(int aTimeout)
{
   // Wait for the event.
   mEventSem.get(aTimeout);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace
}//namespace

